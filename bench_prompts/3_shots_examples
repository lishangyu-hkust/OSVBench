### Examples:
Now, we provide a few examples of system calls, including their functional descriptions, code implementations that may contain bugs, and their corresponding state-machine specifications.

Example 1:
Given a system call `sys_protect_frame`. 

[Functional Description]:
The `sys_protect_frame` system call is designed to modify the permissions of a specific frame in a process's page table, ensuring that the memory access rights are correctly configured according to the caller's requirements. This operation is crucial in managing memory protection in virtual memory systems, where controlling access to memory frames is essential for maintaining system security and stability.
The system call begins by validating the specified page is valid and of the page table type. It also validates the page belongs to the calling process. If these conditions are not met, the operation is terminated with an error to maintain memory integrity and security.
Next, the system verifies the validity of the specified index within the page table. This check ensures that the index falls within acceptable limits, preventing out-of-bounds access that could lead to undefined behavior or security vulnerabilities.
The system verifies the type and ownership of the memory frame to ensure it is valid and belongs to the current process before modifying its permissions. It ensures that the frame is of the expected type and belongs to the current process. Any mismatch results in the operation being rejected with an error, safeguarding against unauthorized access or modification.
The system retrieves the page table entries and checks if the specified slot is valid and present. If the slot is empty, the operation is terminated with an error, as there is no existing mapping to modify.
The system further verifies that the existing page table entry corresponds to the specified frame by checking if the physical frame number derived from the page table entry matches the frame's expected physical address. If the check is not satisfied, the operation is terminated with an error, ensuring that the operation is being performed on the correct frame, preventing accidental modification of unrelated memory regions.
The system enforces strict validation of the new permissions to be applied to the frame. It checks that the requested permissions do not include any unsafe bits in page permissions by comparing it against the page table entry permission mask and ensures the permissions are valid. If any of these conditions are not satisfied, the operation is terminated with an error, maintaining the security and stability of the memory system.
Finally, the system updates the page table by configuring a page table entry to establish a mapping between a virtual memory address and a physical frame, while specifying the associated access permissions. This update is performed atomically to ensure consistency during the operation. After the modification, the system triggers a mechanism to invalidate Translation Lookaside Buffer entries associated with the virtual address space of the current process. This ensures that any stale or outdated address translations cached in the TLB are removed, forcing the processor to fetch updated mappings from the page tables and immediately reflect the new memory configuration.
By the end of the operation, the specified frame has its permissions updated according to the caller's request. This allows the process to control access to its memory frames, enabling features such as read-only or execute-only protection. The `sys_protect_frame` system call, therefore, is a critical component of memory management, allowing processes to dynamically adjust memory protection as needed. Its design ensures that memory is safely managed, preventing unauthorized access and maintaining the integrity of the system's memory architecture.

[Code Implementation]:
Its corresponding code implementation that may contain bugs is as follows: 
```c
int sys_protect_frame(pn_t pt, size_t index, pn_t frame, pte_t perm)
{
    pte_t *entries;
    pn_t pfn;

    if (!is_page_type(pt, PAGE_TYPE_X86_PT))
        return -EINVAL;
    if (!is_page_pid(pt, current))
        return -EACCES;
    if (is_page_index_valid(index))
        return -EINVAL;
    if (!is_page_type(frame, PAGE_TYPE_FRAME))
        return -EINVAL;
    if (!is_page_pid(frame, current))
        return -EACCES;

    entries = get_page(pt);
    /* check if the slot is empty */
    if (!pte_valid(entries[index]))
        return -EINVAL;
    /* check if the entry matches */
    pfn = PTE_ADDR(entries[index]) >> PAGE_SHIFT;
    if (pn_to_pfn(frame) != pfn)
        return -EINVAL;

    /* check for unsafe bits in page permissions */
    if (perm & ~PTE_PERM_MASK)
        return -EINVAL;
    /* make sure we have non-zero entries */
    if (!pte_valid(perm))
        return -EINVAL;

    /* update the page table */
    entries[index] = (pfn << PTE_PFN_SHIFT) | perm;
    hvm_invalidate_tlb(current);

    return 0;
}

enum page_type {
    PAGE_TYPE_FREE = 0,
    PAGE_TYPE_RESERVED,
    PAGE_TYPE_PROC_DATA,
    PAGE_TYPE_FRAME,
    PAGE_TYPE_X86_PML4,
    PAGE_TYPE_X86_PDPT,
    PAGE_TYPE_X86_PD,
    PAGE_TYPE_X86_PT,
    PAGE_TYPE_IOMMU_PML4,
    PAGE_TYPE_IOMMU_PDPT,
    PAGE_TYPE_IOMMU_PD,
    PAGE_TYPE_IOMMU_PT,
    PAGE_TYPE_IOMMU_FRAME,

    /* hack to force 64bit */
    PAGE_TYPE_FORCE_WIDTH = 0xfffffffffffffffful,
};

struct page_desc {
    enum page_type type : 64;
    pid_t pid;
    struct {
        pn_t prev;
        pn_t next;
    } link;
};

enum proc_state {
    PROC_UNUSED = 0,
    PROC_EMBRYO,
    PROC_RUNNABLE,
    PROC_RUNNING,
    PROC_SLEEPING,
    PROC_ZOMBIE,

    /* hack to force 64bit */
    PROC_STATE_FORCE_WIDTH = 0xfffffffffffffffful,
};

struct proc {
    enum proc_state state : 64; /* process state  */
    pid_t ppid;
    pn_t page_table_root; /* page table root */
    pn_t stack;           /* kernel stack */
    pn_t hvm;
    pn_t io_bitmap_a;
    pn_t io_bitmap_b;
    fn_t ofile[NOFILE]; /* open files */
    size_t nr_children;
    size_t nr_fds;
    size_t nr_pages;
    size_t nr_dmapages;
    size_t nr_devs;
    size_t nr_ports;
    size_t nr_vectors;
    size_t nr_intremaps;
    int launched;
    int killed;
    int use_io_bitmap;
    pid_t ipc_from;
    uint64_t ipc_val;
    pn_t ipc_page;
    size_t ipc_size;
    int ipc_fd;
    BITSET_DEFINE(intr, 256);
    uint64_t name[2]; /* process name (debugging) */
    struct {
        pid_t prev;
        pid_t next;
    } ready;      /* ready queue for runnable/running processes */
};

struct page_desc page_desc_table[NPAGE] __aligned(PAGE_SIZE);

extern struct proc proc_table[NPROC];

#define PTE_ADDR(pte) ((physaddr_t)(pte)&BITMASK64(51, 12))
#define PAGE_SHIFT 12

static inline struct page_desc *get_page_desc(pn_t pn)
{
    assert(is_pn_valid(pn), "page number must be valid");
    return &page_desc_table[pn];
}

static inline bool is_pn_valid(pn_t pn)
{
    return pn < NPAGE;
}

static inline bool is_page_type(pn_t pn, enum page_type type)
{
    return is_pn_valid(pn) && get_page_desc(pn)->type == type;
}

static inline bool is_page_pid(pn_t pn, pid_t pid)
{
    return is_pn_valid(pn) && get_page_desc(pn)->pid == pid;
}

static inline bool is_page_index_valid(size_t index)
{
    return index < 512;
}

static inline void *get_page(pn_t pn)
{
    assert(is_pn_valid(pn), "pn must be valid");
    return pages + pn;
}

static inline bool pte_valid(uintptr_t x)
{
    return x & PTE_P;
}

static inline pn_t pn_to_pfn(pn_t pn)
{
    pn_t pfn0 = (uintptr_t)pages / PAGE_SIZE;

    assert(is_pn_valid(pn), "pn must be valid");
    return pfn0 + pn;
}

```

[Specification]:
Based on the detailed functional description and the potentially buggy code implementation of the system call `sys_protect_frame` provided above, the state-machine specification of the system call is deduced as follows:
```python
def sys_protect_frame(old, pt, index, frame, perm):
    cond = z3.And(
        z3.ULT(pt, dt.NPAGE),
        old.pages[pt].type == dt.page_type.PAGE_TYPE_X86_PT,
        old.pages[pt].owner == old.current,

        # Index is a valid page index
        z3.ULT(index, 512),

        z3.ULT(frame, dt.NPAGE),
        old.pages[frame].type == dt.page_type.PAGE_TYPE_FRAME,
        old.pages[frame].owner == old.current,

        # index must be preset
        old.pages[pt].data(index) & dt.PTE_P != 0,

        # the entry in the pt must be the frame
        z3.Extract(63, 40, z3.UDiv(old.pages_ptr_to_int,
                                   z3.BitVecVal(dt.PAGE_SIZE, 64)) + frame) == z3.BitVecVal(0, 24),
        z3.Extract(39, 0, z3.UDiv(old.pages_ptr_to_int, z3.BitVecVal(dt.PAGE_SIZE, 64)) + frame) == z3.Extract(51, 12, old.pages[pt].data(index)),

        # no unsafe bits in perm is set
        perm & (dt.MAX_INT64 ^ dt.PTE_PERM_MASK) == 0,

        # P bit is set in perm
        perm & dt.PTE_P != 0
    )

    new = old.copy()

    new.pages[pt].data[index] = (
        (z3.UDiv(new.pages_ptr_to_int, z3.BitVecVal(dt.PAGE_SIZE, 64)) + frame) << dt.PTE_PFN_SHIFT) | perm

    # The only thing that changed is the permission.
    new.pages[pt].pgtable_perm[index] = perm

    new.flush_tlb(old.current)

    return cond, util.If(cond, new, old)
```

Example 2:
Given a system call `sys_map_page_desc`. 

[Functional Description]:
The `sys_map_page_desc` system call is designed to map a portion of the page descriptor table into a process's address space. This operation is crucial for processes that need to access or manage page descriptors directly, such as in advanced memory management tasks or when implementing custom paging mechanisms. By allowing a process to map page descriptors, the system call provides flexibility in how memory is managed and accessed within the operating system.
The system call begins by validating the number of pages requested to ensure it does not exceed the maximum allowable number of pages required for managing page descriptors. If the request number is too large, the system call returns an error, as it would attempt to map beyond the available descriptors. This check ensures that the mapping operation remains within the bounds of the page descriptor table, preventing access to invalid memory regions.
Once the number is verified, the system calculates the physical frame number corresponding to the starting point of the page descriptor table in memory based on the number of pages requested. This calculation determines the specific memory region within the page descriptor table that will be mapped. Before proceeding with the mapping, the system call checks the specified permissions. If the permissions include write access, the operation is rejected. This restriction is crucial for maintaining the integrity of the page descriptor table, as allowing write access could lead to corruption or unauthorized modifications.
The system then establishes the mapping by updating the appropriate entry in the process's page table to reference the page descriptors. It then performs a series of checks to ensure system consistency and security. The system first verifies the identity of the target process to ensure it is valid and active. If not satisfied, the system terminates the operation and signals an error. It also confirms that the process is either the current one or its embryo process. If not satisfied, the system terminates the operation and signals an error.
The next step is to validate the validity, type and ownership of the memory region involved in the operation. The system ensures that the source page is a valid page, which corresponds to the expected type and is owned by the process. Additionally, it validates the specified location in the page to ensure it falls within acceptable range of page table entries. Any mismatch in type, ownership, or boundaries results in the function rejecting the operation with an error, ensuring memory integrity.
The system also enforces strict validation of the permissions associated with the mapping. It checks that the requested permissions do not include any unsafe bits by comparing them against the permission mask and ensures the page table entry is valid. If any of these checks fail, the system terminates the operation and signals an error. This guarantees that the resulting mapping adheres to the system's security and functionality requirements.
The system then retrieves the source page from the source page number, and verifies the specified entry within the page is unoccupied and empty. This ensures that existing mappings are not unintentionally overwritten, maintaining the integrity of existing memory configurations. If the location is already in use, the system terminates the operation and signals an error.
Finally, the system updates the page table to reference the specified physical memory using the specified page table entry, while applying the validated permissions. The update is performed atomically to ensure consistency during the operation. After the mapping is established, the system triggers a mechanism to invalidate Translation Lookaside Buffer entries associated with the virtual address space of the current process. This step ensures that any outdated or stale cached translations are removed, allowing the system to immediately reflect the new memory configuration.
The result of this operation is a mapped region in the process's address space that corresponds to a portion of the page descriptor table. This capability allows the process to access and manage page descriptors directly, enabling advanced memory management techniques and custom paging implementations. By integrating this functionality into the virtual memory system, the `sys_map_page_desc` system call enhances the flexibility and efficiency of memory management in the operating system.
In conclusion, the `sys_map_page_desc` system call provides a mechanism for mapping page descriptors into a process's address space. It carefully validates inputs, enforces strict permissions, and ensures that the mapping is established securely and efficiently. This design allows processes to access and manage page descriptors directly, which is particularly useful in advanced memory management scenarios. By providing this capability, the system call contributes to the overall robustness and flexibility of the system's virtual memory architecture.

[Code Implementation]:
Its corresponding code implementation that may contain bugs is as follows: 
```c
int sys_map_page_desc(pid_t pid, pn_t from, size_t index, size_t n, pte_t perm)
{
    pn_t pfn;

    if (n < bytes_to_pages(NPAGE * sizeof(struct page_desc)))
        return -EINVAL;
    pfn = (uintptr_t)page_desc_table / PAGE_SIZE + n;
    if (pte_writable(perm))
        return -EACCES;
    return map_page(pid, from, index, pfn, perm, PAGE_TYPE_X86_PT);
}

enum page_type {
    PAGE_TYPE_FREE = 0,
    PAGE_TYPE_RESERVED,
    PAGE_TYPE_PROC_DATA,
    PAGE_TYPE_FRAME,
    PAGE_TYPE_X86_PML4,
    PAGE_TYPE_X86_PDPT,
    PAGE_TYPE_X86_PD,
    PAGE_TYPE_X86_PT,
    PAGE_TYPE_IOMMU_PML4,
    PAGE_TYPE_IOMMU_PDPT,
    PAGE_TYPE_IOMMU_PD,
    PAGE_TYPE_IOMMU_PT,
    PAGE_TYPE_IOMMU_FRAME,

    /* hack to force 64bit */
    PAGE_TYPE_FORCE_WIDTH = 0xfffffffffffffffful,
};

struct proc {
    enum proc_state state : 64; /* process state  */
    pid_t ppid;
    pn_t page_table_root; /* page table root */
    pn_t stack;           /* kernel stack */
    pn_t hvm;
    pn_t io_bitmap_a;
    pn_t io_bitmap_b;
    fn_t ofile[NOFILE]; /* open files */
    size_t nr_children;
    size_t nr_fds;
    size_t nr_pages;
    size_t nr_dmapages;
    size_t nr_devs;
    size_t nr_ports;
    size_t nr_vectors;
    size_t nr_intremaps;
    int launched;
    int killed;
    int use_io_bitmap;
    pid_t ipc_from;
    uint64_t ipc_val;
    pn_t ipc_page;
    size_t ipc_size;
    int ipc_fd;
    BITSET_DEFINE(intr, 256);
    uint64_t name[2]; /* process name (debugging) */
    struct {
        pid_t prev;
        pid_t next;
    } ready;      /* ready queue for runnable/running processes */
};

struct page_desc {
    enum page_type type : 64;
    pid_t pid;
    struct {
        pn_t prev;
        pn_t next;
    } link;
};

enum proc_state {
    PROC_UNUSED = 0,
    PROC_EMBRYO,
    PROC_RUNNABLE,
    PROC_RUNNING,
    PROC_SLEEPING,
    PROC_ZOMBIE,

    /* hack to force 64bit */
    PROC_STATE_FORCE_WIDTH = 0xfffffffffffffffful,
};

#define roundup(x, y)                                                                              \
    ({                                                                                             \
        uintmax_t _x = (uintmax_t)(x);                                                             \
        const typeof(y) _y = y;                                                                    \
        (typeof(x))((((_x) + (_y - 1)) / _y) * _y);                                                \
    })

static inline size_t bytes_to_pages(size_t n)
{
    return roundup(n, PAGE_SIZE) / PAGE_SIZE;
}

static inline bool pte_writable(uintptr_t x)
{
    return x & PTE_W;
}

int map_page(pid_t pid, pn_t from_pn, size_t index, pn_t pfn, pte_t perm,
             enum page_type from_type)
{
    pte_t *entries;

    if (!is_pid_valid(pid))
        return -ESRCH;
    /* check if pid is current or its embryo */
    if (!is_current_or_embryo(pid))
        return -EACCES;
    if (!is_page_type(from_pn, from_type))
        return -EINVAL;
    /* check if pid owns from_pfn */
    if (!is_page_pid(from_pn, pid))
        return -EACCES;
    if (!is_page_index_valid(index))
        return -EINVAL;
    /* no check on pfn; left to caller */
    /* check for unsafe bits in page permissions */
    if (perm & ~PTE_PERM_MASK)
        return -EINVAL;
    /* make sure we have non-zero entries */
    if (!pte_valid(perm))
        return -EINVAL;

    entries = get_page(from_pn);
    /* make sure the entry is empty; may not be necessary but good to check */
    if (pte_valid(entries[index]))
        return -EINVAL;

    /* update the page table */
    mmio_write64(&entries[index], (pfn << PTE_PFN_SHIFT) | perm);
    hvm_invalidate_tlb(pid);
    return 0;
}

static inline bool is_pid_valid(pid_t pid)
{
    return pid > 0 && pid < NPROC;
}

/* permission check: we allow a pid to modify itself or its embryo */
static inline bool is_current_or_embryo(pid_t pid)
{
    struct proc *proc;

    if (pid == current)
        return true;
    proc = get_proc(pid);
    if (proc->ppid == current && proc->state == PROC_EMBRYO)
        return true;
    return false;
}

static struct proc *get_proc(pid_t pid)
{
    assert(is_pid_valid(pid), "pid must be valid");
    return &proc_table[pid];
}

static inline bool is_page_type(pn_t pn, enum page_type type)
{
    return is_pn_valid(pn) && get_page_desc(pn)->type == type;
}

static inline bool is_pn_valid(pn_t pn)
{
    return pn < NPAGE;
}

static inline struct page_desc *get_page_desc(pn_t pn)
{
    assert(is_pn_valid(pn), "page number must be valid");
    return &page_desc_table[pn];
}

static inline bool is_page_pid(pn_t pn, pid_t pid)
{
    return is_pn_valid(pn) && get_page_desc(pn)->pid == pid;
}

static inline bool is_page_index_valid(size_t index)
{
    return index < 512;
}

static inline bool pte_valid(uintptr_t x)
{
    return x & PTE_P;
}

static inline void *get_page(pn_t pn)
{
    assert(is_pn_valid(pn), "pn must be valid");
    return pages + pn;
}

static inline void mmio_write64(void *addr, uint64_t val)
{
    volatile uint64_t *p = addr;

    *p = val;
}

```

[Specification]:
Based on the detailed functional description and the potentially buggy code implementation of the system call `sys_map_page_desc` provided above, the state-machine specification of the system call is deduced as follows:
```python
def sys_map_page_desc(old, pid, frm, index, n, perm):
    cond = z3.And(
        z3.ULT(n, dt.NPAGES_PAGE_DESC_TABLE),

        z3.And(pid > 0, pid < dt.NPROC),

        # the pid is either current or an embryo belonging to current
        z3.Or(pid == old.current,
              z3.And(
                  old.procs[pid].ppid == old.current,
                  old.procs[pid].state == dt.proc_state.PROC_EMBRYO)),

        # frm is a valid pn of type PT whose owner is pid
        z3.ULT(frm, dt.NPAGE),
        old.pages[frm].type == dt.page_type.PAGE_TYPE_X86_PT,
        old.pages[frm].owner == pid,

        # Index is a valid page index
        z3.ULT(index, 512),

        # perm has no unsafe bits on it and it is present and non-writable
        perm & (dt.MAX_INT64 ^ dt.PTE_PERM_MASK) == 0,
        perm & dt.PTE_P != 0,
        perm & dt.PTE_W == 0,

        # index does not have the P bit in the from page
        old.pages[frm].data(index) & dt.PTE_P == 0,
    )

    new = old.copy()

    new.pages[frm].data[index] = ((z3.UDiv(
        new.page_desc_table_ptr_to_int, z3.BitVecVal(dt.PAGE_SIZE, 64)) + n) << dt.PTE_PFN_SHIFT) | perm

    # maintain the "shadow" pgtable
    new.pages[frm].pgtable_pn[index] = n
    new.pages[frm].pgtable_perm[index] = perm
    new.pages[frm].pgtable_type[index] = dt.PGTYPE_PAGE_DESC

    new.flush_tlb(pid)

    return cond, util.If(cond, new, old)
```

Example 3:
Given a system call `clone_proc`. 

[Functional Description]:
The `clone_proc` system call facilitates the creation of a new process by duplicating key aspects of an existing process, such as its memory layout, execution state, and kernel stack. This functionality is fundamental to multitasking operating systems, allowing new processes to be created either as independent entities or as lightweight threads that share certain resources with their parent. The clone_proc function, which implements this system call, ensures that the new process is correctly initialized and inherits the necessary context to execute seamlessly.
The system call begins by allocating resources for the new process. It first validates the validity and the state of the specified process. If the process if invalid or not unused, the operation is rejected with an error. It then ensures that the necessary memory pages for the process's page table root, stack, and hardware state are valid and unallocated. If any of these resources are not valid,unavailable, or already in use, the operation is terminated with an error, preventing resource conflicts and ensuring system stability. Also, the system validates the process's page table root, stack, and hardware state are unique to each other. If any two of them are identical, the operation is rejected with an error.
Once the validations are complete, the system initializes the new process's descriptor, setting its parent process identifier and marking it as in the embryonic state. This state indicates that the process is in the initial stages of creation and not yet fully operational. The system also allocates and initializes pages for the page table root, stack and hvm with the corresponding page type and then updates the current process's metadata to reflect the increase of pages allocated for the specified process. The metadata of the process's parent process is also updated to reflect the increase of its child processes.
The system then duplicates the current process's execution context. It copies all the data of the kernel stack, which contains saved registers and execution state, to the new process's stack. This ensures that the new process begins execution with the same context as the parent process, allowing it to continue from the same point in the program.
Next, the system copies the hardware virtual machine (HVM) state from the current process to the new process. This involves flushing the stale mappings to ensure consistency and copy data from the parent HVM to the child HVM state specified. This step is crucial for maintaining the execution environment, as it includes processor state and other critical hardware configurations.
After duplicating the execution context, the system prepares the new process for execution.
Finally, the system returns control to the user space, allowing the new process to begin execution. The new process starts with the same execution context as the parent, enabling it to perform tasks independently while sharing the same initial state.
In summary, the `clone_proc` system call is a vital mechanism for process creation in operating systems. It carefully allocates resources, duplicates execution context, and prepares the new process for execution, ensuring a seamless and efficient process creation experience. By providing this functionality, the system call supports multitasking and process management, contributing to the overall robustness and flexibility of the operating system.

[Code Implementation]:
Its corresponding code implementation that may contain bugs is as follows: 
```c
int clone_proc(pid_t pid, pn_t pml4, pn_t stack, pn_t hvm)
{
    int r;
    struct proc *proc;
    void *parent_hvm, *child_hvm;

    r = alloc_proc(pid, pml4, stack, hvm);
    if (r)
        return r;

    proc = get_proc(current);

    /* copy the kernel stack (saved registers) */
    memcpy(get_page(stack), get_page(proc->stack), PAGE_SIZE);

    parent_hvm = get_page(proc->hvm);
    child_hvm = get_page(hvm);
    /* copy hvm state */
    flush_current();
    hvm_flush(child_hvm);
    memcpy(child_hvm, parent_hvm, PAGE_SIZE);
    hvm_copy(child_hvm, parent_hvm, pid);

    /* will call run_current() upon return */
    return 0;
}

enum page_type {
    PAGE_TYPE_FREE = 0,
    PAGE_TYPE_RESERVED,
    PAGE_TYPE_PROC_DATA,
    PAGE_TYPE_FRAME,
    PAGE_TYPE_X86_PML4,
    PAGE_TYPE_X86_PDPT,
    PAGE_TYPE_X86_PD,
    PAGE_TYPE_X86_PT,
    PAGE_TYPE_IOMMU_PML4,
    PAGE_TYPE_IOMMU_PDPT,
    PAGE_TYPE_IOMMU_PD,
    PAGE_TYPE_IOMMU_PT,
    PAGE_TYPE_IOMMU_FRAME,

    /* hack to force 64bit */
    PAGE_TYPE_FORCE_WIDTH = 0xfffffffffffffffful,
};

struct page_desc {
    enum page_type type : 64;
    pid_t pid;
    struct {
        pn_t prev;
        pn_t next;
    } link;
};

enum proc_state {
    PROC_UNUSED = 0,
    PROC_EMBRYO,
    PROC_RUNNABLE,
    PROC_RUNNING,
    PROC_SLEEPING,
    PROC_ZOMBIE,

    /* hack to force 64bit */
    PROC_STATE_FORCE_WIDTH = 0xfffffffffffffffful,
};

struct proc {
    enum proc_state state : 64; /* process state  */
    pid_t ppid;
    pn_t page_table_root; /* page table root */
    pn_t stack;           /* kernel stack */
    pn_t hvm;
    pn_t io_bitmap_a;
    pn_t io_bitmap_b;
    fn_t ofile[NOFILE]; /* open files */
    size_t nr_children;
    size_t nr_fds;
    size_t nr_pages;
    size_t nr_dmapages;
    size_t nr_devs;
    size_t nr_ports;
    size_t nr_vectors;
    size_t nr_intremaps;
    int launched;
    int killed;
    int use_io_bitmap;
    pid_t ipc_from;
    uint64_t ipc_val;
    pn_t ipc_page;
    size_t ipc_size;
    int ipc_fd;
    BITSET_DEFINE(intr, 256);
    uint64_t name[2]; /* process name (debugging) */
    struct {
        pid_t prev;
        pid_t next;
    } ready;      /* ready queue for runnable/running processes */
};

struct page_desc page_desc_table[NPAGE] __aligned(PAGE_SIZE);

extern struct proc proc_table[NPROC];

#define NPAGE 8192  /* maximum number of pages */
#define NPROC 64    /* maximum number of processes */
#define PAGE_SHIFT 12
#define PAGE_SIZE (UINT64_C(1) << PAGE_SHIFT)

int alloc_proc(pid_t pid, pn_t page_table_root, pn_t stack, pn_t hvm)
{
    struct proc *proc, *parent;

    if (!is_proc_state(pid, PROC_UNUSED))
        return -ENOMEM;
    if (!is_page_type(page_table_root, PAGE_TYPE_FREE))
        return -ENOMEM;
    if (is_page_type(stack, PAGE_TYPE_FREE))
        return -ENOMEM;
    if (is_page_type(hvm, PAGE_TYPE_FREE))
        return -ENOMEM;
    if (page_table_root == stack)
        return -EINVAL;
    if (page_table_root == hvm)
        return -EINVAL;
    if (stack == hvm)
        return -EINVAL;

    proc = get_proc(pid);
    bzero(proc, sizeof(*proc));
    proc->ppid = current;
    proc->state = PROC_EMBRYO;

    proc->page_table_root = page_table_root;

    alloc_page(pid, PAGE_TYPE_PROC_DATA, stack);
    proc->stack = stack;

    alloc_page(pid, PAGE_TYPE_PROC_DATA, hvm);
    proc->hvm = hvm;

    parent = get_proc(current);
    ++parent->nr_children;

    return 0;
}

static inline bool is_proc_state(pid_t pid, enum proc_state state)
{
    return is_pid_valid(pid) && get_proc(pid)->state == state;
}

static inline bool is_page_type(pn_t pn, enum page_type type)
{
    return is_pn_valid(pn) && get_page_desc(pn)->type == type;
}

static inline bool is_pn_valid(pn_t pn)
{
    return pn < NPAGE;
}

static inline struct page_desc *get_page_desc(pn_t pn)
{
    assert(is_pn_valid(pn), "page number must be valid");
    return &page_desc_table[pn];
}

static inline bool is_pid_valid(pid_t pid)
{
    return pid > 0 && pid < NPROC;
}

static struct proc *get_proc(pid_t pid)
{
    assert(is_pid_valid(pid), "pid must be valid");
    return &proc_table[pid];
}

void bzero(void *s, size_t n)
{
    memset(s, 0, n);
}

#define FREELIST_DEL(arr, member, i)                \
({                                                  \
    typeof(&arr->member) entry = &arr[i].member;    \
    arr[entry->next].member.prev = entry->prev;     \
    arr[entry->prev].member.next = entry->next;     \
    entry->next = entry->prev = 0;                  \
})

void alloc_page(pid_t pid, enum page_type type, pn_t pn)
{
    struct page_desc *desc = get_page_desc(pn);

    assert(is_page_type(pn, PAGE_TYPE_FREE), "must be a free page");
    desc->pid = pid;
    desc->type = type;

    if (pn != 0)
        FREELIST_DEL(page_desc_table, link, pn);

    bzero(get_page(pn), PAGE_SIZE);
    if (pid)
        ++get_proc(pid)->nr_pages;
}

static inline void *get_page(pn_t pn)
{
    assert(is_pn_valid(pn), "pn must be valid");
    return pages + pn;
}

/* called in entry.S */
void flush_current(void)
{
    struct proc *proc;
    void *hvm;

    proc = get_proc(current);
    hvm = get_page(proc->hvm);
    hvm_flush(hvm);
    proc->launched = 0;
}

```

[Specification]:
Based on the detailed functional description and the potentially buggy code implementation of the system call `clone_proc` provided above, the state-machine specification of the system call is deduced as follows:
```python
def clone_proc(old, pid, pml4, stack, hvm):
    cond = z3.And(
        z3.And(pid > 0, pid < dt.NPROC),
        old.procs[pid].state == dt.proc_state.PROC_UNUSED,

        z3.ULT(pml4, dt.NPAGE),
        old.pages[pml4].type == dt.page_type.PAGE_TYPE_FREE,

        z3.ULT(stack, dt.NPAGE),
        old.pages[stack].type == dt.page_type.PAGE_TYPE_FREE,

        z3.ULT(hvm, dt.NPAGE),
        old.pages[hvm].type == dt.page_type.PAGE_TYPE_FREE,

        z3.Distinct(pml4, stack, hvm),
    )
    new = old.copy()

    # Initialize the proc
    new.procs[pid].ppid = new.current
    new.procs[pid].state = dt.proc_state.PROC_EMBRYO
    new.procs[pid].killed = z3.BoolVal(False)
    new.procs[pid].ipc_from = z3.BitVecVal(0, dt.pid_t)
    new.procs[pid].ipc_val = z3.BitVecVal(0, dt.uint64_t)
    new.procs[pid].ipc_page = z3.BitVecVal(0, dt.pn_t)
    new.procs[pid].ipc_size = z3.BitVecVal(0, dt.size_t)
    new.procs[pid].ipc_fd = z3.BitVecVal(0, dt.fd_t)
    new.procs[pid].use_io_bitmap = z3.BoolVal(False)
    new.procs[pid].io_bitmap_a = z3.BitVecVal(0, dt.pn_t)
    new.procs[pid].io_bitmap_b = z3.BitVecVal(0, dt.pn_t)

    # all refcnts should be zero at this point (according to invariants):
    # no need to zero them
    # new.proc_nr_pages = 0
    # new.proc_nr_children = 0
    # new.procs.nr_fds = 0
    # new.proc_nr_devs = 0

    new.procs[pid].ofile = z3.BitVecVal(0, dt.fn_t)
    new.procs[pid].intr = z3.BitVecVal(0, 64)

    # Maintain the "shadow" pgtable
    new.pages[pml4].pgtable_pn = z3.BitVecVal(0, 64)
    new.pages[pml4].pgtable_perm = z3.BitVecVal(0, 64)
    new.pages[pml4].pgtable_type = dt.PGTYPE_NONE

    # Claim the root pml4, the stack and hvm pages
    # We need to do four things to claim a page.
    # 1) Change the type from free to something else
    # 2) change the owner
    # 3) zero the page contents
    # 4) bump the refcount for the owner
    new.pages[pml4].type = dt.page_type.PAGE_TYPE_X86_PML4
    new.pages[pml4].owner = pid
    new.pages[pml4].data = z3.BitVecVal(0, 64)
    new.procs[pid].nr_pages[pml4] += 1

    new.pages[stack].type = dt.page_type.PAGE_TYPE_PROC_DATA
    new.pages[stack].owner = pid
    new.pages[stack].data = z3.BitVecVal(0, 64)
    new.procs[pid].nr_pages[stack] += 1

    new.pages[hvm].type = dt.page_type.PAGE_TYPE_PROC_DATA
    new.pages[hvm].owner = pid
    new.pages[hvm].data = z3.BitVecVal(0, 64)
    new.procs[pid].nr_pages[hvm] += 1

    new.procs[pid].page_table_root = pml4
    new.procs[pid].stack = stack
    new.procs[pid].hvm = hvm

    new.procs[new.current].nr_children[pid] += 1

    # Copy parent's hvm to child's hvm
    new.pages.data = lambda pn, idx, oldfn: \
        util.If(pn == hvm,
                oldfn(new.procs[new.current].hvm, idx),
                oldfn(pn, idx))

    # Copy parent's stack to child's stack
    new.pages.data = lambda pn, idx, oldfn: \
        util.If(pn == stack,
                oldfn(new.procs[new.current].stack, idx),
                oldfn(pn, idx))

    return cond, util.If(cond, new, old)
```
