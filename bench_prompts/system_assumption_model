You will be provided with four sections displayed below, including verification assumption, programming model, a few examples, and a task question.
The operating system kernel verification will be performed under the verification assumption. The programming model is a set of Python classes, fields, constants, and functions confining the syntax and semantics of the state-machine specification. The state-machine specification of a system call must only use the classes, fields, constants, and functions defined in the programming model.
To aid in your understanding of the task, you will be provided with several examples of system calls, each comprising a functional description, a potentially buggy code implementation, and the corresponding state-machine specification, which strictly adheres to the provided programming model.
Then, you will be given with a user question that includes the functional description and a potentially buggy code implementation of a system call. Your task is to synthesize the corresponding state-machine specification that verifies the functional correctness of the given system call.

### Verification Assumption:
The kernel's interfaces consist of 50 system calls, providing support for processes, virtual memory, file descriptors, devices, inter-process communication, and scheduling.
The kernel provides the abstraction of a process using Intel VT-x and AMD-V virtualization support. It runs as a host and user processes run as guests (in ring 0). Trap handlers are implemented as VM-exit handlers, in response to hypercalls (to implement system calls), preemption timer expiration, exceptions, and interrupts. The approach firstly allows the kernel and user space to have separate page tables; the kernel simply uses an identity mapping for its own address space, sidestepping reasoning about virtual-to-physical mapping for kernel code. Secondly, the use of virtualization safely exposes the interrupt descriptor table (IDT) to user processes. This allows the CPU to deliver exceptions (e.g. general protection or page fault) directly to user space, removing the kernel from most exception-handling paths.
Besides, the kernel requires user space to explicitly make resource allocation decisions. For instance, a system call for page allocation requires user space to provide a page number. The kernel simply checks whether the given resource is free, rather than searching for a free one itself. It avoids loops in the kernel and avoids reasoning about linked data structures, e.g. lists and trees.
Furthermore, the memory layout of the kernel contains three categories of memory regions: 1. Boot memory is used during kernel initialization only (e.g., for the kernel’s identity-mapping page table) and freezes after booting. 2. The main chunk of memory is used to keep kernel metadata for resources (e.g., processes, files, and pages), as well as “RAM pages” holding kernel and user data. 3. There are two volatile memory regions: DMA pages, which restrict DMA; and PCI pages (i.e., the “PCI hole”), which are mapped to device registers. “RAM pages” are typed similarly to seL4: the user processes retype pages through system calls, for instance, turning a free page into a page-table page, a page frame, or a stack. The kernel uses page metadata to track the type and ownership of each page and decide whether to allow such system calls.
Additionally, the kernel sidesteps concurrency issues that arise from I/O devices, namely, interrupts and direct memory access (DMA), as follows. First, the kernel executes trap handlers with interrupts disabled, postponing interrupts until the execution returns to user space (which will trap back into the kernel). By doing so, each trap handler runs to completion in the kernel. Second, since devices may asynchronously modify memory through DMA, the kernel isolates their effects by restricting DMA to a dedicated memory region (referred to as DMA pages); this isolation is implemented through mechanisms such as Intel’s VT-d Protected Memory Regions and AMD’s Device Exclusion Vector configured at boot time. In addition, the kernel conservatively considers DMA pages volatile, where memory reads return arbitrary values. In doing so, a DMA write that occurs during kernel execution is effectively equivalent to a no-op with respect to the kernel state, removing the need to explicitly model DMA.
The kernel has some limitations. It does not support threads, copy-on-write fork, shared pages, or Unix permissions. Additionally, the kernel runs on a uniprocessor system and does not provide multicore support.
The kernel’s execution is modeled as a state machine as follows:
A state transition can occur in response to either trap handling or user-space execution (without trapping into the kernel). By design, the execution of a trap handler in the kernel is atomic: it traps from user space into the kernel due to system calls, exceptions, or interrupts, runs to completion, and returns to user space. This atomicity simplifies verification by ruling out interleaved execution, allowing the verifier to reason about each trap handler in its entirety and independently.
The verification for the functional correctness of the kernel uses the declarative specification provided in the task, and the state-machine specification, which consists of two parts: a definition of abstract kernel state and a definition of trap handlers (e.g., system calls) in terms of abstract state transitions. This is based on several assumptions about the kernel and the corresponding hardware. The kernel has two base assumptions. First, the kernel runs on a uniprocessor system with interrupts disabled. Thus, every system call is therefore atomic and runs to completion. Second, the kernel is in a separate address space from the user space, using identity mapping for virtual memory. Additionally, the kernel also assumes the correctness of hardware, such as CPU, memory, and IOMMU.
The verification proves the two theorems: 1. The kernel implementation is a refinement of the state-machine specification. 2. The state-machine specification satisfies the declarative specification. The first theorem assumes that both start in equivalent states and the representation invariant holds, proving that they transition to equivalent states and the representation invariant still holds. Before the system call, the state-machine specification and implementation states are equivalent. After the system call, the kernel states and other modeling data structures in the state-machine specification are correctly updated. To prove the second theorem, the state-machine specification and the declarative specification are translated into SMT and checks that the declarative specification holds after each state transition assuming that it held beforehand.


### Programming Model:
The constant and class modeling for kernel state transition is as follows. The generated kernel state-machine specifications should be composed of the constants, the functions, the classes, and their fields within the scope of the modeling.

# Internal Objects:
# These are populated from llvm metadata info
intremap_state = {IR_FREE: z3.BitVecVal(0, 64), IR_FORCE_WIDTH: z3.BitVecVal(18446744073709551615, 64), IR_ACTIVE: z3.BitVecVal(1, 64)}
file_type = {FD_INODE: z3.BitVecVal(2, 64), FD_SOCKET: z3.BitVecVal(3, 64), FD_NONE: z3.BitVecVal(0, 64), FD_FORCE_WIDTH: z3.BitVecVal(18446744073709551615, 64), FD_PIPE: z3.BitVecVal(1, 64)}
proc_state = {PROC_EMBRYO: z3.BitVecVal(1, 64), PROC_RUNNABLE: z3.BitVecVal(2, 64), PROC_UNUSED: z3.BitVecVal(0, 64), PROC_RUNNING: z3.BitVecVal(3, 64), PROC_STATE_FORCE_WIDTH: z3.BitVecVal(18446744073709551615, 64), PROC_SLEEPING: z3.BitVecVal(4, 64), PROC_ZOMBIE: z3.BitVecVal(5, 64)}
page_type = {PAGE_TYPE_IOMMU_PT: z3.BitVecVal(11, 64), PAGE_TYPE_IOMMU_PML4: z3.BitVecVal(8, 64), PAGE_TYPE_X86_PD: z3.BitVecVal(6, 64), PAGE_TYPE_RESERVED: z3.BitVecVal(1, 64), PAGE_TYPE_IOMMU_PD: z3.BitVecVal(10, 64), PAGE_TYPE_X86_PDPT: z3.BitVecVal(5, 64), PAGE_TYPE_X86_PML4: z3.BitVecVal(4, 64), PAGE_TYPE_X86_PT: z3.BitVecVal(7, 64), PAGE_TYPE_PROC_DATA: z3.BitVecVal(2, 64), PAGE_TYPE_FORCE_WIDTH: z3.BitVecVal(18446744073709551615, 64), PAGE_TYPE_FRAME: z3.BitVecVal(3, 64), PAGE_TYPE_FREE: z3.BitVecVal(0, 64), PAGE_TYPE_IOMMU_FRAME: z3.BitVecVal(12, 64), PAGE_TYPE_IOMMU_PDPT: z3.BitVecVal(9, 64)}    

```python
# Constants:
intremap_state_t = z3.BitVecSort(64)
file_type_t = z3.BitVecSort(64)
proc_state_t = z3.BitVecSort(64)
page_type_t = z3.BitVecSort(64)

PAGE_SIZE = 4096

PCI_START = 0xa0000000
PCI_END = 0x100000000

NPAGE = 8192
NDMAPAGE = 512
NPROC = 64
# NTSLICE
NOFILE = 16
NFILE = 128
NPCIDEV = 64
NINTREMAP = 8
NPCIPAGE = (PCI_END - PCI_START) / PAGE_SIZE

bool_t = z3.BoolSort()

size_t = z3.BitVecSort(64)
uint64_t = z3.BitVecSort(64)
uint32_t = z3.BitVecSort(32)
uint16_t = z3.BitVecSort(16)
uint8_t = z3.BitVecSort(8)

ssize_t = z3.BitVecSort(64)
int64_t = z3.BitVecSort(64)
int32_t = z3.BitVecSort(32)
int16_t = z3.BitVecSort(16)
int8_t = z3.BitVecSort(8)
int = int32_t

pn_t = z3.BitVecSort(64)
dmapn_t = z3.BitVecSort(64)
fn_t = z3.BitVecSort(64)
fd_t = z3.BitVecSort(32)
pte_t = z3.BitVecSort(64)
dmar_pte_t = z3.BitVecSort(64)
pid_t = z3.BitVecSort(64)
off_t = z3.BitVecSort(64)
devid_t = z3.BitVecSort(16)

uintptr_t = z3.BitVecSort(64)
physaddr_t = uintptr_t

INITPID = z3.BitVecVal(1, pid_t)

MAX_INT64 = z3.BitVecVal(2 ** 64 - 1, 64)

def BIT64(bit): return z3.BitVecVal(1 << bit, 64)
def has_bit(v, bit): return (v & bit) != 0

# Flag bit.
PTE_P = BIT64(0)                            # present
PTE_W = BIT64(1)                            # writable
PTE_U = BIT64(2)                            # user
PTE_PWT = BIT64(3)                          # write through
PTE_PCD = BIT64(4)                          # cache disable
PTE_A = BIT64(5)                            # accessed
PTE_D = BIT64(6)                            # dirty
PTE_PS = BIT64(7)                           # page size
PTE_G = BIT64(8)                            # global
PTE_AVL = BIT64(9) | BIT64(10) | BIT64(11)  # available for software use
PTE_NX = BIT64(63)                          # execute disable
PTE_PERM_MASK = PTE_P | PTE_W | PTE_U | PTE_PWT | PTE_PCD | PTE_AVL | PTE_NX

DMAR_PTE_R = BIT64(0)     # Read
DMAR_PTE_W = BIT64(1)     # Write
DMAR_PTE_SNP = BIT64(11)  # Snoop Behaviour
DMAR_PTE_TM = BIT64(62)   # Transient Mapping

DMAR_PTE_ADDR_SHIFT = z3.BitVecVal(12, uint64_t)
PTE_PFN_SHIFT = z3.BitVecVal(12, uint64_t)

PGTYPE_PAGE = z3.BitVecVal(0, uint64_t)
PGTYPE_PROC = z3.BitVecVal(1, uint64_t)
PGTYPE_PAGE_DESC = z3.BitVecVal(2, uint64_t)
PGTYPE_FILE_TABLE = z3.BitVecVal(3, uint64_t)
PGTYPE_DEVICES = z3.BitVecVal(4, uint64_t)
PGTYPE_PCIPAGE = z3.BitVecVal(5, uint64_t)
PGTYPE_IOMMU_FRAME = z3.BitVecVal(6, uint64_t)
PGTYPE_NONE = z3.BitVecVal(7, uint64_t)
    
def BIT64(bit): return z3.BitVecVal(1 << bit, 64)
def has_bit(v, bit): return (v & bit) != 0

# Flag bit.
PTE_P = BIT64(0)                            # present
PTE_W = BIT64(1)                            # writable
PTE_U = BIT64(2)                            # user
PTE_PWT = BIT64(3)                          # write through
PTE_PCD = BIT64(4)                          # cache disable
PTE_A = BIT64(5)                            # accessed
PTE_D = BIT64(6)                            # dirty
PTE_PS = BIT64(7)                           # page size
PTE_G = BIT64(8)                            # global
PTE_AVL = BIT64(9) | BIT64(10) | BIT64(11)  # available for software use
PTE_NX = BIT64(63)                          # execute disable
PTE_PERM_MASK = PTE_P | PTE_W | PTE_U | PTE_PWT | PTE_PCD | PTE_AVL | PTE_NX

DMAR_PTE_R = BIT64(0)     # Read
DMAR_PTE_W = BIT64(1)     # Write
DMAR_PTE_SNP = BIT64(11)  # Snoop Behaviour
DMAR_PTE_TM = BIT64(62)   # Transient Mapping

DMAR_PTE_ADDR_SHIFT = z3.BitVecVal(12, uint64_t)
PTE_PFN_SHIFT = z3.BitVecVal(12, uint64_t)

PGTYPE_PAGE = z3.BitVecVal(0, uint64_t)
PGTYPE_PROC = z3.BitVecVal(1, uint64_t)
PGTYPE_PAGE_DESC = z3.BitVecVal(2, uint64_t)
PGTYPE_FILE_TABLE = z3.BitVecVal(3, uint64_t)
PGTYPE_DEVICES = z3.BitVecVal(4, uint64_t)
PGTYPE_PCIPAGE = z3.BitVecVal(5, uint64_t)
PGTYPE_IOMMU_FRAME = z3.BitVecVal(6, uint64_t)
PGTYPE_NONE = z3.BitVecVal(7, uint64_t)

NPAGES_PAGES = NPAGE
NPAGES_PROC_TABLE = 6
NPAGES_FILE_TABLE = 2
NPAGES_PAGE_DESC_TABLE = 64
NPAGES_DEVICES = 2

# Classes:

class Accessor(object):
    def __init__(self, field, instance, imap):
        self._field = field
        self._instance = instance
        self._imap = imap

    def __repr__(self):
        return "Partial application of {!r}{!r}".format(self._instance._fields[self._field], tuple(self._instance._path))

    def __call__(self, *args):
        instance = self._instance
        for i in args:
            instance = instance[i]
        return self._imap(instance)

    def __getattr__(self, attr):
        val = getattr(self._imap, attr)
        if isinstance(val, types.MethodType):
            return lambda *args, **kwargs: val(self._instance, *args, **kwargs)
        else:
            return val

    def __getitem__(self, arg):
        return Accessor(self._field, self._instance[arg], self._imap)

    def __setitem__(self, arg, value):
        return setattr(self._instance[arg], self._field, value)

    def __iadd__(self, value):
        return self._imap.__iadd__(self._instance, value)

    def __sub__(self, value):
        return self._imap.__isub__(self._instance, value)

class AbstractMap(object):
    def __init__(self, *types):
        global _order
        self._order = _order
        _order += 1

        self._name = None
        self._arity = len(types) - 1
        self._types = types

    def get_arity(self):
        return self._arity

    def get_types(self):
        return self._types

    def invariants(self):
        return []

    def initial(self, instance):
        pass

    def _init(self, obj, name, prefix=None):
        if prefix:
            self._prefix = prefix + '_'
        else:
            self._prefix = ''

        self._name = name
        obj._fields[self._name] = self.new()

    def __get__(self, instance, owner=None):
        f = instance._fields[self._name]

        if len(instance._path) < self.get_arity():
            return Accessor(self._name, instance, self)
        elif self._arity == len(instance._path):
            return self.get(f, instance._path)
        else:
            raise TypeError('Too many arguments to function: expected arguments: {!r}'.format(self._types))

    def __call__(self, instance):
        return self.__get__(instance)

    def __set__(self, instance, value):
        assert len(instance._path) <= self.get_arity()
        instance._fields[self._name] = self.set(instance._fields[self._name], instance._path, value)

    def __iadd__(self, instance, value):
        return self.iadd(instance._fields[self._name], instance._path, value)

    def __isub__(self, instance, value):
        return self.isub(instance._fields[self._name], instance._path, value)

    def new(self):
        raise NotImplementedError()

    def get(self):
        raise NotImplementedError()

    def iadd(self):
        raise NotImplementedError()

    def isub(self):
        raise NotImplementedError()

class StructMeta(type):
    def __new__(cls, name, parents, dct):
        meta = collections.OrderedDict()
        for k, v in sorted(dct.items(), key=lambda v: getattr(v[1], '_order', float('inf'))):
            if hasattr(v, '_init'):
                meta[k] = v
            if getattr(v, '__metaclass__', None) == cls:
                meta[k] = v.__class__
                del dct[k]
        dct['_meta'] = meta
        return super(StructMeta, cls).__new__(cls, name, parents, dct)

class Struct(object):
    __frozen = False
    __metaclass__ = StructMeta

    def __init__(self):
        global _order
        self._order = _order
        _order += 1

    def copy(self):
        return copy.deepcopy(self)

    def _init(self, parent, name):
        self._fields = {}
        self._structs = collections.OrderedDict()
        self._path = []

        for k, v in self._meta.items():
            if isinstance(v, type):
                self._structs[k] = v()
                self._structs[k]._init(self, k)
            else:
                v._init(self, k, prefix=name)

        for k, v in self._structs.items():
            v = copy.copy(v)
            self._structs[k] = v
            v._init(self, k)
        self.__frozen = True

    def __getattribute__(self, arg):
        if arg.startswith('_'):
            return super(Struct, self).__getattribute__(arg)

        if arg not in self._meta:
            return super(Struct, self).__getattribute__(arg)

        if arg in self._structs:
            return self._structs[arg]
        else:
            return super(Struct, self).__getattribute__(arg)

    def __setattr__(self, attribute, value):
        if self.__frozen and not attribute in self.__dict__ and not attribute in self._meta:
            raise AttributeError("No such attribute: '{}'".format(attribute))
        return super(Struct, self).__setattr__(attribute, value)

    def __getitem__(self, value):
        # shallow copy of self
        other = copy.copy(self)
        # deep copy of the path
        other._path = copy.deepcopy(self._path)
        other._path.append(value)
        return other

    def invariants(self, conj=None):
        if conj is None:
            conj = []
        for k, v in self._meta.items():
            if k in self._structs:
                v = self._structs[k]
            for c in v.invariants():
                conj.append(c)
        return conj

    def initial(self):
        kp = self.copy()
        for k, v in kp._meta.items():
            if k in kp._structs:
                kp._structs[k] = kp._structs[k].initial()
            else:
                v.initial(kp)
        return kp

    def ite(self, other, cond):
        assert self.__class__ == other.__class__
        new = copy.copy(self)
        new._fields = util.If(cond, self._fields, other._fields)
        new._structs = util.If(cond, self._structs, other._structs)
        return new

class BaseStruct(Struct):
    def __init__(self):
        self._init(None, None)

class Map(AbstractMap):
    def new(self):
        if self.get_arity() == 0:
            types = self.get_types()
            assert len(types) == 1
            typ = types[0]
            if typ == z3.BoolSort():
                value = util.FreshBool(self._prefix + self._name)
            else:
                value = util.FreshBitVec(self._prefix + self._name, typ)
        else:
            value = util.FreshFunction(self._prefix + self._name, *self.get_types())
        return value

    def get(self, fn, args):
        if args:
            return fn(*args)
        else:
            return fn

    def set(self, old, args, value):
        # "raw" assignment of a lambda without any accessor arguments
        if isinstance(value, types.FunctionType):
            assert not args
            return lambda *args: value(*args, oldfn=old)
        elif self.get_arity() == 0:
            # assignment to a value
            return value
        else:
            # assignment with value with partial arguments
            return util.partial_update(old, args, value)

class Refcnt(Map):
    # Refcount based on permuting the set of `owned` objects.
    def __init__(self, *args, **kwargs):
        self._initial_offset = kwargs.pop('initial_offset', 0)
        super(Refcnt, self).__init__(*args, **kwargs)

    def __call__(self, instance, owner=None):
        f = instance._fields[self._name]
        assert len(instance._path) == 1
        return self.get(f, instance._path)

    def new(self):
        assert self.get_arity() == 2
        owner, owned, size = self.get_types()
        ref = util.FreshFunction(self._prefix + self._name, owner, size)
        perm = util.FreshFunction(self._prefix + self._name, owner, size, owned)
        perm_inv = util.FreshFunction(self._prefix + self._name, owner, owned, size)
        return (ref, perm, perm_inv)

    def check(self, instance, conj, is_owner_valid, is_owned_valid, max_refs, ownerfn=None, ownedby=None):
        # Emit correctness definitions for this refcnt.

        assert ownerfn != None or ownedby != None
        assert not (ownerfn and ownedby)

        if ownerfn:
            ownedby = lambda arg1, arg2: ownerfn(arg2) == arg1

        fn = instance._fields[self._name]
        owner = util.FreshBitVec('owner', self.get_types()[0])
        owned = util.FreshBitVec('owned', self.get_types()[1])
        idx = util.FreshBitVec('idx', self.get_types()[2])

        ref, perm, perm_inv = fn

        # 1) a valid input implies a valid owned output
        conj.append(z3.ForAll([owner, owned], z3.Implies(is_owner_valid(owner),
            z3.Implies(is_owned_valid(owned),
                z3.ULT(perm_inv(owner, owned), max_refs)
        ))))

        # 2) The function is a bijection
        conj.append(z3.ForAll([owner, owned, idx],
            z3.Implies(z3.And(
                is_owner_valid(owner),
                is_owned_valid(owned),
                z3.ULT(idx, max_refs)),
            z3.And(
                perm_inv(owner, perm(owner, idx)) == idx,
                perm(owner, perm_inv(owner, owned)) == owned,
        ))))

        # 3) if 'owner' owns 'owned', then f(owned) < ref, otherwise f(owned) >= ref
        conj.append(z3.ForAll([owner, owned], z3.Implies(
            z3.And(
                is_owner_valid(owner),
                is_owned_valid(owned),
            ),
            z3.And(
                z3.Implies(ownedby(owner, owned),
                    z3.ULT(perm_inv(owner, owned), ref(owner))),
                z3.Implies(z3.Not(ownedby(owner, owned)),
                    z3.UGE(perm_inv(owner, owned), ref(owner)))
            ))))

        # Checks that the refcnt don't overflows, that if its
        # value is 0 that the owner owns nothing and if its value is max_refs that
        # process owns all the resources.

        # refcount is in the range 0 <= r <= max_refs
        conj.append(z3.ForAll([owner],
            z3.Implies(is_owner_valid(owner), z3.ULE(ref(owner), max_refs))))

        # if refcount is 0, then you own no pages
        conj.append(z3.ForAll([owner, owned], z3.Implies(
            z3.And(
                is_owner_valid(owner),
                is_owned_valid(owned),
                ref(owner) == z3.BitVecVal(0, self.get_types()[-1]),
            ),
            z3.Not(ownedby(owner, owned)),
        )))

        # if refcount is max_refs, then that owner owns all the resources
        conj.append(z3.ForAll([owner, owned], z3.Implies(
            z3.And(
                is_owner_valid(owner),
                is_owned_valid(owned),
                ref(owner) == max_refs
            ),
            ownedby(owner, owned),
        )))

    def set(self, old, args, value):
        assert isinstance(value, tuple)
        assert all(map(lambda v: isinstance(v, types.FunctionType), value))
        return value

    def get(self, fn, args):
        return fn[0](*args)

    def iadd(self, old, args, value):
        assert len(args) == 2
        assert value == 1
        ref, perm, perm_inv = old

        refval = ref(args[0])
        owned = perm(args[0], refval)
        idx = perm_inv(args[0], args[1])

        ref = util.partial_update(ref, (args[0],), refval + 1)

        # We are modeling the ownership with three functions,
        # 1) a refcount number: the number of objects owned by `owner`
        # 2) a function with the property that the first `refval` objects owned by `owner`
        # 3) a function that is the inverse of 2)

        # For example, consider 5 'ownable' objects in the system,
        # Where `owner` has 2 objects: 3 and 2. The state might look like:
        #--------------------------
        # 3 | 2 | 1 | 4 | 5
        #--------------------------
        #         ^
        #       refval
        # Now, iadd is incrementing the refcnt by allocating args[2]
        # To do this we have to swap the current position of args[2] with the
        # Slot at refval.

        # For example, if args[1] is 5, we update the state by swapping the `1`
        # at index refval with the index of args[1].
        #--------------------------
        # 3 | 2 | 5 | 4 | 1
        #--------------------------
        #             ^
        #           refval

        # Write the new value (args[1]) into position refval and maintain the
        # inverse function
        perm = util.partial_update(perm, (args[0], refval), args[1])
        perm_inv = util.partial_update(perm_inv, (args[0], args[1]), refval)

        # Write the previous value of refval to the previous location of args[1]
        perm = util.partial_update(perm, (args[0], idx), owned)
        perm_inv = util.partial_update(perm_inv, (args[0], owned), idx)

        return (ref, perm, perm_inv)

    def initial(self, instance):
        def trim(var):
            if var.size() == self.get_types()[1].size():
                return var
            return z3.Extract(self.get_types()[1].size() - 1, 0, var)
        def extend(var):
            if var.size() < self.get_types()[-1].size():
                v = z3.ZeroExt(self.get_types()[2].size() - var.size(), var)
                return v
            return var

        ref = instance._fields[self._name][0]
        perm = lambda pid, idx: trim(idx + self._initial_offset)
        perm_inv = lambda pid, child: extend(child - self._initial_offset)
        instance._fields[self._name] = (ref, perm, perm_inv)

    def isub(self, old, args, value):
        assert len(args) == 2
        assert value == 1
        ref, perm, perm_inv = old

        ref = util.partial_update(ref, (args[0],), ref(args[0]) - 1)

        refval = ref(args[0])
        owned = perm(args[0], refval)
        idx = perm_inv(args[0], args[1])

        perm = util.partial_update(perm, (args[0], refval), args[1])
        perm_inv = util.partial_update(perm_inv, (args[0], args[1]), refval)

        perm = util.partial_update(perm, (args[0], idx), owned)
        perm_inv = util.partial_update(perm_inv, (args[0], owned), idx)

        return (ref, perm, perm_inv)


class Refcnt2(Map):
    # Refcount based on permuting the set of `owned` objects.
    def __call__(self, instance, owner=None):
        f = instance._fields[self._name]
        assert len(instance._path) == 1
        return self.get(f, instance._path)

    def new(self):
        assert self.get_arity() == 2
        owner, owned, size = self.get_types()
        ref = util.FreshFunction(self._prefix + self._name, owner, size)
        perm1 = util.FreshFunction(self._prefix + self._name, owner, size, owned[0])
        perm2 = util.FreshFunction(self._prefix + self._name, owner, size, owned[1])
        perm_inv = util.FreshFunction(self._prefix + self._name, owner, owned[0], owned[1], size)
        return (ref, perm1, perm2, perm_inv)

    def check(self, instance, conj, is_owner_valid, is_owned1_valid, is_owned2_valid, max_refs, ownerfn=None, ownedby=None):
        # Emit correctness definitions for this refcnt.

        is_owned_valid = lambda a, b: z3.And(is_owned1_valid(a), is_owned2_valid(b))

        assert ownerfn != None or ownedby != None
        assert not (ownerfn and ownedby)

        if ownerfn:
            ownedby = lambda arg1, arg2: ownerfn(arg2) == arg1

        fn = instance._fields[self._name]
        owner = util.FreshBitVec('owner', self.get_types()[0])
        owned1 = util.FreshBitVec('owned1', self.get_types()[1][0])
        owned2 = util.FreshBitVec('owned2', self.get_types()[1][1])
        idx = util.FreshBitVec('idx', self.get_types()[2])

        ref, perm1, perm2, perm_inv = fn

        # 1) a valid input implies a valid owned output
        conj.append(z3.ForAll([owner, owned1, owned2], z3.Implies(
            z3.And(
                is_owner_valid(owner),
                is_owned_valid(owned1, owned2)),
            z3.ULT(perm_inv(owner, owned1, owned2), max_refs)
        )))

        conj.append(z3.ForAll([owner, idx], z3.Implies(
            z3.And(
                is_owner_valid(owner),
                z3.ULT(idx, max_refs)),
            z3.And(
                is_owned1_valid(perm1(owner, idx)),
                is_owned2_valid(perm2(owner, idx))))))

        # 2) The function function is a bijection
        conj.append(z3.ForAll([owner, owned1, owned2, idx],
            z3.Implies(z3.And(
                is_owner_valid(owner),
                is_owned_valid(owned1, owned2),
                z3.ULT(idx, max_refs)),
            z3.And(
                perm_inv(owner, perm1(owner, idx), perm2(owner, idx)) == idx,
                perm1(owner, perm_inv(owner, owned1, owned2)) == owned1,
                perm2(owner, perm_inv(owner, owned1, owned2)) == owned2,
        ))))

        # 3) if 'owner' owns 'owned', then f(owned) < ref, otherwise w(owned) >= ref
        conj.append(z3.ForAll([owner, owned1, owned2], z3.Implies(
            z3.And(
                is_owner_valid(owner),
                is_owned_valid(owned1, owned2),
            ),
            z3.And(
                z3.Implies(ownedby(owner, (owned1, owned2)),
                    z3.ULT(perm_inv(owner, owned1, owned2), ref(owner))),
                z3.Implies(z3.Not(ownedby(owner, (owned1, owned2))),
                    z3.UGE(perm_inv(owner, owned1, owned2), ref(owner)))
            ))))

        # Checks that the refcnt don't overflows, that if its
        # value is 0 that the owner owns nothing and if its value is max_refs that
        # process owns all the resources.

        # refcount is in the range 0 <= r <= max_refs
        conj.append(z3.ForAll([owner],
            z3.Implies(is_owner_valid(owner), z3.ULE(ref(owner), max_refs))))

        # if refcount is 0, then you own no pages
        conj.append(z3.ForAll([owner, owned1, owned2], z3.Implies(
            z3.And(
                is_owner_valid(owner),
                is_owned_valid(owned1, owned2),
                ref(owner) == z3.BitVecVal(0, self.get_types()[-1]),
            ),
            z3.Not(ownedby(owner, (owned1, owned2))),
        )))

        # if refcount is max_refs, then that owner owns all the resources
        conj.append(z3.ForAll([owner, owned1, owned2], z3.Implies(
            z3.And(
                is_owner_valid(owner),
                is_owned_valid(owned1, owned2),
                ref(owner) == max_refs
            ),
            ownedby(owner, (owned1, owned2)),
        )))

    def initial(self, instance):
        def trim(var, type):
            if var.size() == type.size():
                return var
            return z3.Extract(type.size() - 1, 0, var)
        def extend(var):
            if var.size() < self.get_types()[-1].size():
                v = z3.ZeroExt(self.get_types()[2].size() - var.size(), var)
                return v
            return var

        ref = instance._fields[self._name][0]
        perm1 = lambda fn, idx: trim(z3.UDiv(idx, 16) + 1 , type=self.get_types()[1][0])
        perm2 = lambda fn, idx: trim(z3.URem(idx, 16), type=self.get_types()[1][1])
        perm_inv = lambda fn, owned1, owned2: extend(owned1 - 1) * 16 + extend(owned2 % 16)
        instance._fields[self._name] = (ref, perm1, perm2, perm_inv)

    def set(self, old, args, value):
        assert isinstance(value, tuple)
        assert all(map(lambda v: isinstance(v, types.FunctionType), value))
        return value

    def get(self, fn, args):
        return fn[0](*args)

    def iadd(self, old, args, value):
        assert len(args) == 2
        assert value == 1
        ref, perm1, perm2, perm_inv = old

        refval = ref(args[0])
        owned_x = perm1(args[0], refval)
        owned_y = perm2(args[0], refval)
        idx = perm_inv(args[0], *args[1])

        ref = util.partial_update(ref, (args[0],), refval + 1)

        # We are modeling the ownership with three functions,
        # 1) a refcount number: the number of objects owned by `owner`
        # 2) a function with the property that the first `refval` objects owned by `owner`
        # 3) a function that is the inverse of 2)

        # For example, consider 5 'ownable' objects in the system,
        # Where `owner` has 2 objects: 3 and 2. The state might look like:
        #--------------------------
        # 3 | 2 | 1 | 4 | 5
        #--------------------------
        #         ^
        #       refval
        # Now, iadd is incrementing the refcnt by allocating args[2]
        # To do this we have to swap the current position of args[2] with the
        # Slot at refval.

        # For example, if args[1] is 5, we update the state by swapping the `1`
        # at index refval with the index of args[1].
        #--------------------------
        # 3 | 2 | 5 | 4 | 1
        #--------------------------
        #             ^
        #           refval

        # Write the new value (args[1]) into position refval and maintain the
        # inverse function
        perm1 = util.partial_update(perm1, (args[0], refval), args[1][0])
        perm2 = util.partial_update(perm2, (args[0], refval), args[1][1])
        perm_inv = util.partial_update(perm_inv, (args[0], args[1][0], args[1][1]), refval)

        # Write the previous value of refval to the previous location of args[1]
        perm1 = util.partial_update(perm1, (args[0], idx), owned_x)
        perm2 = util.partial_update(perm2, (args[0], idx), owned_y)
        perm_inv = util.partial_update(perm_inv, (args[0], owned_x, owned_y), idx)

        return (ref, perm1, perm2, perm_inv)

    def isub(self, old, args, value):
        assert len(args) == 2
        assert value == 1
        ref, perm1, perm2, perm_inv = old

        ref = util.partial_update(ref, (args[0],), ref(args[0]) - 1)

        refval = ref(args[0])
        owned_x = perm1(args[0], refval)
        owned_y = perm2(args[0], refval)
        idx = perm_inv(args[0], *args[1])

        perm1 = util.partial_update(perm1, (args[0], refval), args[1][0])
        perm2 = util.partial_update(perm2, (args[0], refval), args[1][1])
        perm_inv = util.partial_update(perm_inv, (args[0], args[1][0], args[1][1]), refval)

        perm1 = util.partial_update(perm1, (args[0], idx), owned_x)
        perm2 = util.partial_update(perm2, (args[0], idx), owned_y)
        perm_inv = util.partial_update(perm_inv, (args[0], owned_x, owned_y), idx)

        return (ref, perm1, perm2, perm_inv)

class PCI(Struct):
    owner = Map(devid_t, pid_t)
    page_table_root = Map(devid_t, pn_t)

class Vectors(Struct):
    owner = Map(uint8_t, pid_t)

class IO(Struct):
    owner = Map(uint16_t, pid_t)

class Intremap(Struct):
    state = Map(size_t, intremap_state_t)
    devid = Map(size_t, devid_t)
    vector = Map(size_t, uint8_t)

class Page(Struct):
    data = Map(pn_t, uint64_t, uint64_t)
    owner = Map(pn_t, pid_t)
    type = Map(pn_t, page_type_t)

    pgtable_pn = Map(pn_t, uint64_t, uint64_t)
    pgtable_perm = Map(pn_t, uint64_t, uint64_t)
    pgtable_type = Map(pn_t, uint64_t, uint64_t)

    pgtable_reverse_pn = Map(pn_t, pn_t)
    pgtable_reverse_idx = Map(pn_t, pn_t)

class DMAPage(Struct):
    owner = Map(pn_t, pid_t)
    type = Map(pn_t, page_type_t)

class PCIPage(Struct):
    owner = Map(pn_t, devid_t)
    valid = Map(pn_t, bool_t)

class Proc(Struct):
    state = Map(pid_t, proc_state_t)
    ppid = Map(pid_t, pid_t)
    killed = Map(pid_t, bool_t)

    ipc_from = Map(pid_t, pid_t)
    ipc_val = Map(pid_t, uint64_t)
    ipc_page = Map(pid_t, pn_t)
    ipc_size = Map(pid_t, size_t)
    ipc_fd = Map(pid_t, fd_t)

    ofile = Map(pid_t, fd_t, fn_t)

    nr_children = Refcnt(pid_t, pid_t, size_t, initial_offset=1)
    nr_fds = Refcnt(pid_t, fd_t, size_t)
    nr_pages = Refcnt(pid_t, pn_t, size_t)
    nr_dmapages = Refcnt(pid_t, pn_t, size_t)
    nr_devs = Refcnt(pid_t, devid_t, size_t)
    nr_ports = Refcnt(pid_t, uint16_t, size_t)
    nr_vectors = Refcnt(pid_t, uint8_t, size_t)
    nr_intremaps = Refcnt(pid_t, size_t, size_t)

    stack = Map(pid_t, pn_t)
    hvm = Map(pid_t, pn_t)
    page_table_root = Map(pid_t, pn_t)

    use_io_bitmap = Map(pid_t, bool_t)
    io_bitmap_a = Map(pid_t, pn_t)
    io_bitmap_b = Map(pid_t, pn_t)

    intr = Map(pid_t, uint64_t, uint64_t)

    tlbinv = Map(pid_t, bool_t)

class File(Struct):
    type = Map(fn_t, file_type_t)
    refcnt = Refcnt2(fn_t, (pid_t, fd_t), size_t)
    value = Map(fn_t, uint64_t)
    omode = Map(fn_t, uint64_t)
    offset = Map(fn_t, size_t)

# Global kernel state for state-machine specification

class KernelState(BaseStruct):
    pages_ptr_to_int = Map(uint64_t)
    proc_table_ptr_to_int = Map(uint64_t)
    page_desc_table_ptr_to_int = Map(uint64_t)
    file_table_ptr_to_int = Map(uint64_t)
    devices_ptr_to_int = Map(uint64_t)
    dmapages_ptr_to_int = Map(uint64_t)

    procs = Proc()
    pages = Page()
    dmapages = DMAPage()
    files = File()
    pci = PCI()
    pcipages = PCIPage()
    vectors = Vectors()
    io = IO()
    intremaps = Intremap()

    current = Map(pid_t)
    iotlbinv = Map(bool_t)

    def flush_iotlb(self):
        self.iotlbinv = z3.BoolVal(True)

    def flush_tlb(self, pid):
        self.procs[pid].tlbinv = z3.BoolVal(True)
```

Other than the model above, z3 datatypes and methods are included in the model, such as `z3.ULT()`, `z3.UGT()`, `z3.ULE()`, `z3.UGE()`, `z3.UDiv()`, `z3.And()`, `z3.Or()`, `z3.Not()`, `z3.Extract()`, `z3.BitVecVal()`, `z3.BoolVal()`, `z3.Implies()`, `z3.ZeroExt()`, `z3.Distinct()`, etc., along with lambda functions and the `util.If(cond, a, b)` function, which conceptually computes `ite(cond, a, b)` but tries to simplify out the `ite` if possible and supports more than just plain z3 datatypes. In the state-machine specification, all conditional branches should be encapsulated within the `util.If(cond, a, b)` function. The state-machine specification should not contain any if-else statements.
The generated state-machine specification must utilize only the classes, fields, internal objects, constants, and functions outlined above. For example, suppose `ks` is an instance of the class `KernelState`, `pn` represents the page number, and `index` indicates the virtual address. `ks.pages[pn]` invokes the `__getitem__` method of the `Struct` class with the argument `pn`, allowing access to the specific page in the kernel state as defined by the programming model. Furthermore, `ks.pages[pn].data` refers to the data map associated with a specific page identified by the page number `pn`. For write access to the data at a specific address specified by `index` in the kernel state, `ks.pages[pn].data[index]` should be used. Conversely, `ks.pages[pn].data(index)` is utilized for read access to retrieve the data at the specified address. `KernelState.flush_iotlb()` calls a function defined within the relevant class to perform its operation. Additionally, the constant data required for the specification resides in the `dt` module. To access these constants and internal objects, use the appropriate module and constant reference, such as `dt.intremap_state.IR_FREE`.
